import src.service.FrogService.*
import wollok.game.*
import src.config.setup.*
import src.service.TickService.*
import src.config.StateManager.*
import src.model.Frog.*
import src.utils.StageFactory.*
import src.service.GameService.*
import src.service.InputService.*
import src.model.KeyBinding.*
import src.model.AbsLog.*
import src.model.LogLong.*

describe "Tests" {
  const stateManager = new StateManager()
  const tickService = new TickService()
  const frog = new Frog(
    startX = stateManager.frogInitXPosition(),
    startY = stateManager.frogInitYPosition()
  )
  const frogService = new FrogService(stateManager = stateManager, frog = frog)
  
  method initalize() {
    game.clear()
    setup.initialize()
    game.start()
  }
  
  test "tickService runs properly" {
    assert.equals(true, tickService.areTicksRunning())
  }
  
  test "Frog didnt reach goal" {
    assert.equals(false, frog.reachedGoal())
  }
  
  test "Frog reached goal" {
    frog.position(game.at(0, 0))
    assert.equals(true, frog.reachedGoal())
  }
  
  test "Log moves and resets" {
    const log = new LogLong(id = 1, row = 0, startX = 19, speed = 1)
    log.moveAndCheckReset()
    
    assert.equals(true, log.position().x() == 0)
  }
  
  test "Frog is on a log" {
    frog.position(game.at(5, 3))
    const log = new LogLong(id = 2, row = 3, startX = 5, speed = 1)
    stateManager.currentLogsList([log])
    assert.equals(true, frogService.isInLog())
  }
}